// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: authorization.proto

package authorization

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	uuid "github.com/koverto/uuid"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Token struct {
	Token string `protobuf:"bytes,1,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (m *Token) Reset()         { *m = Token{} }
func (m *Token) String() string { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()    {}
func (*Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dbbe58d1e51a797, []int{0}
}
func (m *Token) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Token.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token.Merge(m, src)
}
func (m *Token) XXX_Size() int {
	return m.Size()
}
func (m *Token) XXX_DiscardUnknown() {
	xxx_messageInfo_Token.DiscardUnknown(m)
}

var xxx_messageInfo_Token proto.InternalMessageInfo

func (m *Token) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type TokenClaims struct {
	TokenID       *uuid.UUID `protobuf:"bytes,1,opt,name=tokenID,proto3" json:"tokenID,omitempty" bson:"_id"`
	UserID        *uuid.UUID `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID,omitempty"`
	ExpiresAt     *time.Time `protobuf:"bytes,3,opt,name=expiresAt,proto3,stdtime" json:"expiresAt,omitempty"`
	InvalidatedAt *time.Time `protobuf:"bytes,4,opt,name=invalidatedAt,proto3,stdtime" json:"invalidatedAt,omitempty"`
}

func (m *TokenClaims) Reset()         { *m = TokenClaims{} }
func (m *TokenClaims) String() string { return proto.CompactTextString(m) }
func (*TokenClaims) ProtoMessage()    {}
func (*TokenClaims) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dbbe58d1e51a797, []int{1}
}
func (m *TokenClaims) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenClaims) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenClaims.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenClaims) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenClaims.Merge(m, src)
}
func (m *TokenClaims) XXX_Size() int {
	return m.Size()
}
func (m *TokenClaims) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenClaims.DiscardUnknown(m)
}

var xxx_messageInfo_TokenClaims proto.InternalMessageInfo

func (m *TokenClaims) GetTokenID() *uuid.UUID {
	if m != nil {
		return m.TokenID
	}
	return nil
}

func (m *TokenClaims) GetUserID() *uuid.UUID {
	if m != nil {
		return m.UserID
	}
	return nil
}

func (m *TokenClaims) GetExpiresAt() *time.Time {
	if m != nil {
		return m.ExpiresAt
	}
	return nil
}

func (m *TokenClaims) GetInvalidatedAt() *time.Time {
	if m != nil {
		return m.InvalidatedAt
	}
	return nil
}

func init() {
	proto.RegisterType((*Token)(nil), "authorization.Token")
	proto.RegisterType((*TokenClaims)(nil), "authorization.TokenClaims")
}

func init() { proto.RegisterFile("authorization.proto", fileDescriptor_1dbbe58d1e51a797) }

var fileDescriptor_1dbbe58d1e51a797 = []byte{
	// 367 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xcd, 0x4a, 0xc3, 0x40,
	0x14, 0x85, 0x33, 0x5a, 0xab, 0x9d, 0x52, 0x17, 0x63, 0x17, 0x21, 0x60, 0x2a, 0xb3, 0x72, 0x35,
	0xa1, 0x3f, 0x2b, 0x91, 0x62, 0x7f, 0x28, 0x64, 0x1b, 0x5a, 0xb7, 0x32, 0x31, 0x63, 0x3a, 0xb4,
	0xc9, 0x94, 0x64, 0x52, 0xc4, 0xa7, 0xe8, 0x63, 0xb9, 0xec, 0x46, 0x70, 0xa5, 0xd2, 0x3e, 0x80,
	0xe0, 0x13, 0x88, 0x93, 0xb4, 0xb6, 0x52, 0x8a, 0x9b, 0x70, 0xe7, 0xde, 0xef, 0x9c, 0x1c, 0xee,
	0x85, 0x67, 0x34, 0x91, 0x43, 0x11, 0xf1, 0x27, 0x2a, 0xb9, 0x08, 0xc9, 0x24, 0x12, 0x52, 0xa0,
	0xd2, 0x56, 0xd3, 0x68, 0xf8, 0x5c, 0x0e, 0x13, 0x97, 0xdc, 0x8b, 0xc0, 0xf2, 0x85, 0x2f, 0x2c,
	0x45, 0xb9, 0xc9, 0xc3, 0xcd, 0xb4, 0x4a, 0xea, 0xa4, 0xaa, 0x9a, 0xaa, 0xa7, 0xaa, 0xd4, 0xc4,
	0xc0, 0x1b, 0xaa, 0x91, 0x98, 0xb2, 0x48, 0x0a, 0x2b, 0x49, 0xb8, 0xa7, 0x3e, 0x19, 0x53, 0xf1,
	0x85, 0xf0, 0xc7, 0x6c, 0x6d, 0x68, 0x49, 0x1e, 0xb0, 0x58, 0xd2, 0x60, 0x92, 0x02, 0xf8, 0x1c,
	0x1e, 0xf5, 0xc5, 0x88, 0x85, 0xa8, 0x9c, 0x15, 0x3a, 0xb8, 0x00, 0x97, 0x05, 0x27, 0x7d, 0xe0,
	0x4f, 0x00, 0x8b, 0xaa, 0xea, 0x8c, 0x29, 0x0f, 0x62, 0xd4, 0x80, 0xc7, 0xf2, 0xe7, 0x69, 0x77,
	0x15, 0x57, 0xac, 0x41, 0xa2, 0xfe, 0x36, 0x18, 0xd8, 0xdd, 0xf6, 0xe9, 0xd7, 0x5b, 0x05, 0xba,
	0xb1, 0x08, 0xaf, 0xf0, 0x1d, 0xf7, 0xb0, 0xb3, 0x42, 0x11, 0x86, 0xf9, 0x24, 0x66, 0x91, 0xdd,
	0xd5, 0x0f, 0xfe, 0x8a, 0x9c, 0x6c, 0x82, 0x9a, 0xb0, 0xc0, 0x1e, 0x27, 0x3c, 0x62, 0x71, 0x4b,
	0xea, 0x87, 0x0a, 0x33, 0x48, 0x9a, 0x9e, 0xac, 0xd2, 0x93, 0xfe, 0x2a, 0x7d, 0x3b, 0x37, 0x7b,
	0xaf, 0x00, 0xe7, 0x57, 0x82, 0x7a, 0xb0, 0xc4, 0xc3, 0x29, 0x1d, 0x73, 0x8f, 0x4a, 0xe6, 0xb5,
	0xa4, 0x9e, 0xfb, 0xa7, 0xc7, 0xb6, 0xac, 0xf6, 0x02, 0x60, 0xa9, 0xb5, 0x79, 0x1d, 0x74, 0x0d,
	0xf3, 0x9d, 0x88, 0x51, 0xc9, 0x90, 0x41, 0xb6, 0x8f, 0xb9, 0xb1, 0x19, 0xa3, 0xbc, 0x6b, 0x86,
	0x35, 0xd4, 0x84, 0x27, 0xb7, 0x99, 0x3d, 0xda, 0xc9, 0x18, 0x7b, 0x5c, 0xb1, 0x86, 0x7a, 0x10,
	0xda, 0xeb, 0x80, 0x7b, 0x13, 0xec, 0xf5, 0x69, 0xeb, 0xcf, 0x0b, 0x13, 0xcc, 0x17, 0x26, 0xf8,
	0x58, 0x98, 0x60, 0xb6, 0x34, 0xb5, 0xf9, 0xd2, 0xd4, 0x5e, 0x97, 0xa6, 0xe6, 0xe6, 0xd5, 0x6a,
	0xea, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x7a, 0xb8, 0x35, 0xf9, 0xaa, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AuthorizationClient is the client API for Authorization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthorizationClient interface {
	Create(ctx context.Context, in *TokenClaims, opts ...grpc.CallOption) (*Token, error)
	Validate(ctx context.Context, in *Token, opts ...grpc.CallOption) (*TokenClaims, error)
	Invalidate(ctx context.Context, in *TokenClaims, opts ...grpc.CallOption) (*TokenClaims, error)
}

type authorizationClient struct {
	cc *grpc.ClientConn
}

func NewAuthorizationClient(cc *grpc.ClientConn) AuthorizationClient {
	return &authorizationClient{cc}
}

func (c *authorizationClient) Create(ctx context.Context, in *TokenClaims, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := c.cc.Invoke(ctx, "/authorization.Authorization/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) Validate(ctx context.Context, in *Token, opts ...grpc.CallOption) (*TokenClaims, error) {
	out := new(TokenClaims)
	err := c.cc.Invoke(ctx, "/authorization.Authorization/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authorizationClient) Invalidate(ctx context.Context, in *TokenClaims, opts ...grpc.CallOption) (*TokenClaims, error) {
	out := new(TokenClaims)
	err := c.cc.Invoke(ctx, "/authorization.Authorization/Invalidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthorizationServer is the server API for Authorization service.
type AuthorizationServer interface {
	Create(context.Context, *TokenClaims) (*Token, error)
	Validate(context.Context, *Token) (*TokenClaims, error)
	Invalidate(context.Context, *TokenClaims) (*TokenClaims, error)
}

func RegisterAuthorizationServer(s *grpc.Server, srv AuthorizationServer) {
	s.RegisterService(&_Authorization_serviceDesc, srv)
}

func _Authorization_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenClaims)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.Authorization/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).Create(ctx, req.(*TokenClaims))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Token)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.Authorization/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).Validate(ctx, req.(*Token))
	}
	return interceptor(ctx, in, info, handler)
}

func _Authorization_Invalidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenClaims)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthorizationServer).Invalidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/authorization.Authorization/Invalidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthorizationServer).Invalidate(ctx, req.(*TokenClaims))
	}
	return interceptor(ctx, in, info, handler)
}

var _Authorization_serviceDesc = grpc.ServiceDesc{
	ServiceName: "authorization.Authorization",
	HandlerType: (*AuthorizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Authorization_Create_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _Authorization_Validate_Handler,
		},
		{
			MethodName: "Invalidate",
			Handler:    _Authorization_Invalidate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "authorization.proto",
}

func (m *Token) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Token) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthorization(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	return i, nil
}

func (m *TokenClaims) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenClaims) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TokenID != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAuthorization(dAtA, i, uint64(m.TokenID.Size()))
		n1, err := m.TokenID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.UserID != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAuthorization(dAtA, i, uint64(m.UserID.Size()))
		n2, err := m.UserID.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.ExpiresAt != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAuthorization(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.ExpiresAt)))
		n3, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ExpiresAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.InvalidatedAt != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAuthorization(dAtA, i, uint64(github_com_gogo_protobuf_types.SizeOfStdTime(*m.InvalidatedAt)))
		n4, err := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.InvalidatedAt, dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func encodeVarintAuthorization(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Token) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovAuthorization(uint64(l))
	}
	return n
}

func (m *TokenClaims) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TokenID != nil {
		l = m.TokenID.Size()
		n += 1 + l + sovAuthorization(uint64(l))
	}
	if m.UserID != nil {
		l = m.UserID.Size()
		n += 1 + l + sovAuthorization(uint64(l))
	}
	if m.ExpiresAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ExpiresAt)
		n += 1 + l + sovAuthorization(uint64(l))
	}
	if m.InvalidatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.InvalidatedAt)
		n += 1 + l + sovAuthorization(uint64(l))
	}
	return n
}

func sovAuthorization(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAuthorization(x uint64) (n int) {
	return sovAuthorization(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Token) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthorization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Token: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Token: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthorization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAuthorization
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthorization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthorization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenClaims) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAuthorization
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenClaims: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenClaims: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthorization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthorization
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenID == nil {
				m.TokenID = &uuid.UUID{}
			}
			if err := m.TokenID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthorization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthorization
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserID == nil {
				m.UserID = &uuid.UUID{}
			}
			if err := m.UserID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthorization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthorization
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpiresAt == nil {
				m.ExpiresAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ExpiresAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAuthorization
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAuthorization
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InvalidatedAt == nil {
				m.InvalidatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.InvalidatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAuthorization(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAuthorization
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAuthorization(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAuthorization
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthorization
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAuthorization
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthAuthorization
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAuthorization
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAuthorization(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAuthorization = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAuthorization   = fmt.Errorf("proto: integer overflow")
)
